// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/Watch2Gather/server/cmd/room/config"
	"github.com/Watch2Gather/server/internal/room/app/router"
	grpc2 "github.com/Watch2Gather/server/internal/room/infras/grpc"
	"github.com/Watch2Gather/server/internal/room/infras/repo"
	"github.com/Watch2Gather/server/internal/room/usecases/rooms"
	"github.com/Watch2Gather/server/pkg/postgres"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

func InitApp(cfg *config.Config, dbConnStr postgres.DBConnString, grpcServer *grpc.Server) (*App, func(), error) {
	dbEngine, cleanup, err := dbEngineFunc(dbConnStr)
	if err != nil {
		return nil, nil, err
	}
	roomRepo := repo.NewRoomRepo(dbEngine)
	userInfoDomainService, err := grpc2.NewGRPCUserInfoClient(cfg)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	useCase := rooms.NewUseCase(roomRepo, userInfoDomainService)
	roomServiceServer := router.NewGRPCRoomServer(grpcServer, cfg, useCase)
	app := New(cfg, dbEngine, useCase, roomServiceServer, userInfoDomainService)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

func dbEngineFunc(url postgres.DBConnString) (postgres.DBEngine, func(), error) {
	db, err := postgres.NewPostgresDB(url)
	if err != nil {
		return nil, nil, err
	}
	return db, func() { db.Close() }, nil
}
